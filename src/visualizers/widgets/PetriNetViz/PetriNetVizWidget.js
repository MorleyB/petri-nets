/*globals define, WebGMEGlobal*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Sun Aug 07 2022 14:02:17 GMT-0500 (Central Daylight Time).
 */

define(['jointjs', 'css!./styles/PetriNetVizWidget.css'], function (joint) {
    'use strict';

    var WIDGET_CLASS = 'petri-net-viz';

    function PetriNetVizWidget(logger, container) {
        this._logger = logger.fork('Widget');

        this._el = container;

        this.nodes = {};
        this._initialize();

        this._logger.debug('ctor finished');
    }

    PetriNetVizWidget.prototype._initialize = function () {
        var width = this._el.width(),
            height = this._el.height(),
            self = this;

        // set widget class
        this._el.addClass(WIDGET_CLASS);

        // Create graph model
        this._jointPN = new joint.dia.Graph;

        // Add graph to paper
        this._jointPaper = new joint.dia.Paper({
            el: this._el,
            width : width,
            height: height,
            model: this._jointPN,
            interactive: true
        });

        // add event calls to elements
        this._jointPaper.on('element:pointerdblclick', function(elementView) {
            const currentElement = elementView.model;
            console.log(currentElement);
            if (self._webgmePN) {
                console.log(self._webgmePN.id2state[currentElement.id]);
                self._setCurrentState(self._webgmePN.id2state[currentElement.id]);
            }
        });

        this._webgmePN = null;
    };

    PetriNetVizWidget.prototype.onWidgetContainerResize = function (width, height) {
        this._logger.debug('Widget is resizing...');
    };

    // Petri Network manipulating functions called from the controller
    PetriNetVizWidget.prototype.initNetwork = function (networkDescriptor) {
        const self = this;
        console.log(networkDescriptor);

        self._webgmeData = networkDescriptor;
        self._jointPN.clear();
        const pn = self._webgmeData;
        pn.id2place = {};
        pn.id2transtions = {};

        Object.keys(pn.places).forEach(placeId => {
            let vertex = null;
            vertex = new joint.shapes.standard.Circle({
                position: pn.places[placeId].position,
                size: { width: 60, height: 60 },
                attrs: {
                    label : {
                        text: pn.places[placeId].tokens,
                        //event: 'element:label:pointerdown',
                        fontWeight: 'bold',
                        cursor: 'text',
                        //style: {
                        //    userSelect: 'text'
                        //}
                    },
                    body: {
                        strokeWidth: 2,
                        cursor: 'pointer'
                    }
                },
            tokens: pn.places[placeId].tokens
            });
            vertex.addTo(self._jointPN);
            pn.places[placeId].joint = vertex;
            pn.id2place[vertex.id] = placeId;
        });

        Object.keys(pn.transitions).forEach(transId => {
            let vertex = null;
            vertex = new joint.shapes.standard.Rectangle({
                position: pn.transitions[transId].position,
                size: { width: 20, height: 60 },
                attrs: {
                    label : {
                        // text: pn.transitions[transId].name,
                        //event: 'element:label:pointerdown',
                        fontWeight: 'bold',
                        cursor: 'pointer',
                        //style: {
                        //    userSelect: 'text'
                        //}
                    },
                    body: {
                        strokeWidth: 2,
                        cursor: 'pointer'
                    }
                }
            });
            vertex.addTo(self._jointPN);
            pn.transitions[transId].joint = vertex;
            pn.id2transtions[vertex.id] = transId;
        });

        Object.keys(pn.places).forEach(placeId => {
            Object.values(pn.places[placeId].transitions).forEach(transId => {
                console.log(pn.places[placeId]);
                pn.places[placeId].jointArc = pn.places[placeId].jointArc || {};
                const link = new joint.shapes.standard.Link({
                    source: {id: pn.places[placeId].joint.id},
                    target: {id: pn.transitions[pn.places[placeId].transitions[transId]].joint.id},
                    attrs: {
                        line: {
                            strokeWidth: 2
                        },
                        wrapper: {
                            cursor: 'default'
                        }
                    },
                    labels: [{
                        position: {
                            distance: 0.5,
                            offset: 0,
                            args: {
                                keepGradient: true,
                                ensureLegibility: true
                            }
                        },
                        attrs: {
                            text: {
                                fontWeight: 'bold'
                            }
                        }
                    }]
                });
                link.addTo(self._jointPN);
                pn.places[placeId].jointArc[transId] = link;
            })
        });

        Object.keys(pn.transitions).forEach(transId => {
            Object.values(pn.transitions[transId].places).forEach(placeId => {
                pn.transitions[transId].jointArc = pn.transitions[transId].jointArc || {};
                const link = new joint.shapes.standard.Link({
                    source: {id: pn.transitions[transId].joint.id},
                    target: {id: pn.places[pn.transitions[transId].places[placeId]].joint.id},
                    attrs: {
                        line: {
                            strokeWidth: 2
                        },
                        wrapper: {
                            cursor: 'default'
                        }
                    },
                    labels: [{
                        position: {
                            distance: 0.5,
                            offset: 0,
                            args: {
                                keepGradient: true,
                                ensureLegibility: true
                            }
                        },
                        attrs: {
                            text: {
                                fontWeight: 'bold'
                            }
                        }
                    }]
                });
                link.addTo(self._jointPN);
                pn.transitions[transId].jointArc[placeId] = link;
            })
        });

        //now refresh the visualization
        self._jointPaper.updateViews();
        self._decorateMachine();
    };

    PetriNetVizWidget.prototype._decorateMachine = function() {
        const data = this._webgmeData;
        Object.keys(data.places).forEach(placeId => {
            data.places[placeId].joint.attr('label/text', data.places[placeId].tokens);
        });
        Object.keys(data.transitions).forEach(transId => {
            data.transitions[transId].joint.attr('body/fill', 'white');
        });
 
        Object.keys(data.events).forEach(transId => {
            data.transitions[transId].joint.attr('body/fill', 'black');
        });
    };

    // Adding/Removing/Updating items
    PetriNetVizWidget.prototype.addNode = function (desc) {
        if (desc) {
            // Add node to a table of nodes
            var node = document.createElement('div'),
                label = 'children';

            if (desc.childrenIds.length === 1) {
                label = 'child';
            }

            this.nodes[desc.id] = desc;
            node.innerHTML = 'Adding node "' + desc.name + '" (click to view). It has ' +
                desc.childrenIds.length + ' ' + label + '.';

            this._el.append(node);
            node.onclick = this.onNodeClick.bind(this, desc.id);
        }
    };

    PetriNetVizWidget.prototype.removeNode = function (gmeId) {
        var desc = this.nodes[gmeId];
        this._el.append('<div>Removing node "' + desc.name + '"</div>');
        delete this.nodes[gmeId];
    };

    PetriNetVizWidget.prototype.updateNode = function (desc) {
        if (desc) {
            this._logger.debug('Updating node:', desc);
            this._el.append('<div>Updating node "' + desc.name + '"</div>');
        }
    };

    /* * * * * * * * Visualizer event handlers * * * * * * * */

    PetriNetVizWidget.prototype.onNodeClick = function (/*id*/) {
        // This currently changes the active node to the given id and
        // this is overridden in the controller.
    };

    PetriNetVizWidget.prototype.onBackgroundDblClick = function () {
        this._el.append('<div>Background was double-clicked!!</div>');
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    PetriNetVizWidget.prototype.destroy = function () {
    };

    PetriNetVizWidget.prototype.onActivate = function () {
        this._logger.debug('PetriNetVizWidget has been activated');
    };

    PetriNetVizWidget.prototype.onDeactivate = function () {
        this._logger.debug('PetriNetVizWidget has been deactivated');
    };

    return PetriNetVizWidget;
});
